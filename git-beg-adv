### Git basic-intermediate ###

git is a vcs -> version control system.
git is a distributed version control system. Each user gets a complete copy of code.

git settings apply @ 3 levels
 1. System -> Applies to All users
 2. Global -> All repo's of the current user.
 3. Local -> The current repo.

 git config --global user.name "My UserName"
 git config --global user.email "gmail@mydomain.my"
 git config --global core.editor "<your editor> --wait"
 git config --global -e # will open editor to edit all global settings.

 On windows Line endings are indicated by 2 chars. \r\n
 \r -> Carriage Return
 \n -> Line Feed

 On macOS/Linux line ending is \n.

 git config --global core.autocrlf true  # If on win.
 git config --global core.autocrlf input # mac / Linux

 git config --help # to get help regarding config.

 # Initializing a git repo.
 git init # initializes a empty git repo.
 git add <filename>/.
 git commit -m "initial commit"

 Each commit contains a snapshot.

 git add .  # adds files recursively.
 git status # shows files in staging area.

 git commit -m "<your commit msg>"
 git commit -am "<commit msg>" # Directly commits the changes.

 git ls-files # lists files in staging area.
 git rm <filename/pattern i.e *.txt> # Removes files from working Dir and staging area.
 git mv <filename> # moves / renames files.

 # Ignoring files with Git
   vim .gitignore # contains 1 entry per line.

  git rm --cached <filename> # Removes file from staging area only. not the local copy.

  git status -s # summary of the staging area. // Shows short status
  git diff --staged # To check changes staged for commit.
  git diff # shows working dir vs staging area diff.

  git config --global diff.tool <toolname i.e. vscode / atom>
  git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
  git config --global -e # to edit config settings with editor.
  git difftool # Launch the GUI diff tool.
  git difftool --staged # To check changes staged for commit.

  git log # shows commit history.
  git log --oneline
  git log --oneline --reverse

  git show <commit id> # shows a commit.
  git show HEAD~1 # to show 2nd last commit.
  git show HEAD~1:<full path to a file> # shows complete file.
  git ls-tree HEAD~1 # shows all files in a commit.

  git restore --staged <filename> # To revert changes a file in staging area.
  git restore --staged . # To revert changes to all files in staging area.

  git clean -fd # Removes local changes i.e. untracked files etc.
  git status -s

  git rm <filename> # To delete.
  git commit -m "deleted file"
  git log --oneline
  git restore --source=HEAD~1 <Full path to file> # will restore the file.

  
