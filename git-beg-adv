### Git basic-intermediate ###

git is a vcs -> version control system.
git is a distributed version control system. Each user gets a complete copy of code.

git settings apply @ 3 levels
 1. System -> Applies to All users
 2. Global -> All repo's of the current user.
 3. Local -> The current repo.

 git config --global user.name "My UserName"
 git config --global user.email "gmail@mydomain.my"
 git config --global core.editor "<your editor> --wait"
 git config --global -e # will open editor to edit all global settings.

 On windows Line endings are indicated by 2 chars. \r\n
 \r -> Carriage Return
 \n -> Line Feed

 On macOS/Linux line ending is \n.

 git config --global core.autocrlf true  # If on win.
 git config --global core.autocrlf input # mac / Linux

 git config --help # to get help regarding config.

 # Initializing a git repo.
 git init # initializes a empty git repo.
 git add <filename>/.
 git commit -m "initial commit"

 Each commit contains a snapshot.

 git add .  # adds files recursively.
 git status # shows files in staging area.

 git commit -m "<your commit msg>"
 git commit -am "<commit msg>" # Directly commits the changes.

 git ls-files # lists files in staging area.
 git rm <filename/pattern i.e *.txt> # Removes files from working Dir and staging area.
 git mv <filename> # moves / renames files.

 # Ignoring files with Git
   vim .gitignore # contains 1 entry per line.

  git rm --cached <filename> # Removes file from staging area only. not the local copy.

  git status -s # summary of the staging area. // Shows short status
  git diff --staged # To check changes staged for commit.
  git diff # shows working dir vs staging area diff.

  git config --global diff.tool <toolname i.e. vscode / atom>
  git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
  git config --global -e # to edit config settings with editor.
  git difftool # Launch the GUI diff tool.
  git difftool --staged # To check changes staged for commit.

  git log # shows commit history.
  git log --oneline
  git log --oneline --reverse

  git show <commit id> # shows a commit.
  git show HEAD~1 # to show 2nd last commit.
  git show HEAD~1:<full path to a file> # shows complete file.
  git ls-tree HEAD~1 # shows all files in a commit.

  git restore --staged <filename> # To revert changes a file in staging area.
  git restore --staged . # To revert changes to all files in staging area.

  git clean -fd # Removes local changes i.e. untracked files etc.
  git status -s

  git rm <filename> # To delete.
  git commit -m "deleted file"
  git log --oneline
  git restore --source=HEAD~1 <Full path to file> # will restore the file.

  # Git history browse and search.

  git log
  git log --oneline
  git log --oneline --stat
  git log --stat
  git log --oneline --patch
  git log --oneline -3 # shows last 3 commits
  git log --oneline --author="<name of committer>"
  git log --oneline --after="2020-02-20"
  git log --oneline --before=""
  git log --oneline --grep="GUI"
  git log --oneline -S="hello()" # searches for all commits that created a fxn.
  git log --oneline -S"OBJECTIVES"
  git log --oneline -S"OBJECTIVES" --patch
  git log --oneline scommithash..dcommithash
  git log --oneline <filename> # shows commits to a particular file.
  git log --oneline --patch <filename> # will show changes in each commit.

  # Formatiing the log output
  git log --pretty=format:"%an committed %H"
  git log --pretty=format:"%an committed %h on %cd"

  # aliases in git
  git config --global alias.lg "log --pretty=format: '%an committed %h'"
  git config --global -e
  git config --global alias.unstage "restore --staged ."

  #Viewing commits
  git show HEAD~2 # show 2 commits before the last commit.
  git show HEAD~2:<Path to file> # shows final version of file for the particular commit.
  git show HEAD~2 --name-only
  git show HEAD~2 --name-status

  #viewing the changes across commits
  git diff HEAD~2
  git diff HEAD~2 HEAD <filename>
  git diff HEAD~2 HEAD --name-only
  git diff HEAD~2 HEAD --name-status

  # checking out a commit
  git checkout <commit id>
  git log --oneline --all
  git checkout master

  #Bug finding with git
  git bisect start
  git bisect bad # marks current commit as bad commit
  git bisect good <commit id>
  git bisect good
  git bisect good
  git log --oneline --all
  git bisect bad
  git bisect reset

  # Finding contributors using shortlog
  git shortlog
  git shortlog -n
  git shortlog -n -s
  git shortlog -n -s -e
  git shortlog -n -s -e --before=""  --after=""

  #viewing the history of a file
  git log <filename>
  git log --oneline <filename>
  git log --oneline --stat <filename>
  git log --oneline --patch <filename>

  #restoring a deleted file
  git rm <filename>
  git log --oneline -- toc.txt
  git checkout <commitid> <path to file>
  git status -s
  git commit -m "Restoring the file"

  #finding author of a line using blame
  git blame <filename>
  git blame -e <filename>
  git blame -L 1,3 <filename> # will only show first 3 lines

  #Tagging in git
  git tag v1.0 # will tag the last commit with version no.
  git tag v1.0 <commit id>
  git log --oneline
  git checkout v1.0
  git tag # will show all the tags
  git tag -a v1.1 -m "My description" # creates annotated tags / allows to write a short description of the tag.
  git tag -n # shows tag with annotations
  git show v1.1
  git tag -d <tag name> # will delete the tag.

  # Branches in git
  git branch <branch_name> # will create a branch.
  git branch # will list branches along with current branch
  git status # shows branch

  git switch <branch-name> # will switch to branch.
  git branch -m <old_name> <new_name> # To rename git branch.
  git switch master
  got log --oneline
  git branch -d <branch_name> # To delete A branch.

  git log master..feature1 # diff log of feature1 vs master.
  git diff master..feature1 # diff of 2 branches
  git diff feature1 # feature1 vs currently checked out branch differences.
  git diff --name-only feature1
  git diff --name-status feature1

  #Stashing
  It is used to save uncommitted changes in current branch.
  git stash push -m "saving my uncomm chngs"
  git stash push -am "your msg/description" # will stash all tracked and non tracked files.
  git stash list # will show all stashes in branch.
  git stash show 1
  git stash apply 1
  git stash drop 1
  git stash clear # will clear all the stashes.
