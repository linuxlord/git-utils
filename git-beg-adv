### Git basic-intermediate ###

git is a vcs -> version control system.
git is a distributed version control system. Each user gets a complete copy of code.

git settings apply @ 3 levels
 1. System -> Applies to All users
 2. Global -> All repo's of the current user.
 3. Local -> The current repo.

 git config --global user.name "My UserName"
 git config --global user.email "gmail@mydomain.my"
 git config --global core.editor "<your editor> --wait"
 git config --global -e # will open editor to edit all global settings.

 On windows Line endings are indicated by 2 chars. \r\n
 \r -> Carriage Return
 \n -> Line Feed

 On macOS/Linux line ending is \n.

 git config --global core.autocrlf true  # If on win.
 git config --global core.autocrlf input # mac / Linux

 git config --help # to get help regarding config.

 # Initializing a git repo.
 git init # initializes a empty git repo.
 git add <filename>/.
 git commit -m "initial commit"

 Each commit contains a snapshot.

 git add .  # adds files recursively.
 git status # shows files in staging area.

 git commit -m "<your commit msg>"
 git commit -am "<commit msg>" # Directly commits the changes.

 git ls-files # lists files in staging area.
 git rm <filename/pattern i.e *.txt> # Removes files from working Dir and staging area.
 git mv <filename> # moves / renames files.

 # Ignoring files with Git
   vim .gitignore # contains 1 entry per line.

  git rm --cached <filename> # Removes file from staging area only. not the local copy.

  git status -s # summary of the staging area. // Shows short status
  git diff --staged # To check changes staged for commit.
  git diff # shows working dir vs staging area diff.

  git config --global diff.tool <toolname i.e. vscode / atom>
  git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
  git config --global -e # to edit config settings with editor.
  git difftool # Launch the GUI diff tool.
  git difftool --staged # To check changes staged for commit.

  git log # shows commit history.
  git log --oneline
  git log --oneline --reverse

  git show <commit id> # shows a commit.
  git show HEAD~1 # to show 2nd last commit.
  git show HEAD~1:<full path to a file> # shows complete file.
  git ls-tree HEAD~1 # shows all files in a commit.

  git restore --staged <filename> # To revert changes a file in staging area.
  git restore --staged . # To revert changes to all files in staging area.

  git clean -fd # Removes local changes i.e. untracked files etc.
  git status -s

  git rm <filename> # To delete.
  git commit -m "deleted file"
  git log --oneline
  git restore --source=HEAD~1 <Full path to file> # will restore the file.

  # Git history browse and search.

  git log
  git log --oneline
  git log --oneline --stat
  git log --stat
  git log --oneline --patch
  git log --oneline -3 # shows last 3 commits
  git log --oneline --author="<name of committer>"
  git log --oneline --after="2020-02-20"
  git log --oneline --before=""
  git log --oneline --grep="GUI"
  git log --oneline -S="hello()" # searches for all commits that created a fxn.
  git log --oneline -S"OBJECTIVES"
  git log --oneline -S"OBJECTIVES" --patch
  git log --oneline scommithash..dcommithash
  git log --oneline <filename> # shows commits to a particular file.
  git log --oneline --patch <filename> # will show changes in each commit.

  # Formatiing the log output
  git log --pretty=format:"%an committed %H"
  git log --pretty=format:"%an committed %h on %cd"

  # aliases in git
  git config --global alias.lg "log --pretty=format: '%an committed %h'"
  git config --global -e
  git config --global alias.unstage "restore --staged ."

  #Viewing commits
  git show HEAD~2 # show 2 commits before the last commit.
  git show HEAD~2:<Path to file> # shows final version of file for the particular commit.
  git show HEAD~2 --name-only
  git show HEAD~2 --name-status

  #viewing the changes across commits
  git diff HEAD~2
  git diff HEAD~2 HEAD <filename>
  git diff HEAD~2 HEAD --name-only
  git diff HEAD~2 HEAD --name-status

  # checking out a commit
  git checkout <commit id>
  git log --oneline --all
  git checkout master

  #Bug finding with git
  git bisect start
  git bisect bad # marks current commit as bad commit
  git bisect good <commit id>
  git bisect good
  git bisect good
  git log --oneline --all
  git bisect bad
  git bisect reset

  # Finding contributors using shortlog
  git shortlog
  git shortlog -n
  git shortlog -n -s
  git shortlog -n -s -e
  git shortlog -n -s -e --before=""  --after=""

  #viewing the history of a file
  git log <filename>
  git log --oneline <filename>
  git log --oneline --stat <filename>
  git log --oneline --patch <filename>

  #restoring a deleted file
  git rm <filename>
  git log --oneline -- toc.txt
  git checkout <commitid> <path to file>
  git status -s
  git commit -m "Restoring the file"

  #finding author of a line using blame
  git blame <filename>
  git blame -e <filename>
  git blame -L 1,3 <filename> # will only show first 3 lines

  #Tagging in git
  git tag v1.0 # will tag the last commit with version no.
  git tag v1.0 <commit id>
  git log --oneline
  git checkout v1.0
  git tag # will show all the tags
  git tag -a v1.1 -m "My description" # creates annotated tags / allows to write a short description of the tag.
  git tag -n # shows tag with annotations
  git show v1.1
  git tag -d <tag name> # will delete the tag.

  # Branches in git
  git branch <branch_name> # will create a branch.
  git branch # will list branches along with current branch
  git status # shows branch

  git switch <branch-name> # will switch to branch.
  git branch -m <old_name> <new_name> # To rename git branch.
  git switch master
  got log --oneline
  git branch -d <branch_name> # To delete A branch.

  git log master..feature1 # diff log of feature1 vs master.
  git diff master..feature1 # diff of 2 branches
  git diff feature1 # feature1 vs currently checked out branch differences.
  git diff --name-only feature1
  git diff --name-status feature1

  #Stashing
  It is used to save uncommitted changes in current branch.
  git stash push -m "saving my uncomm chngs"
  git stash push -am "your msg/description" # will stash all tracked and non tracked files.
  git stash list # will show all stashes in branch.
  git stash show 1
  git stash apply 1
  git stash drop 1
  git stash clear # will clear all the stashes.

  #Merging  fastforward & 3-way merges.
  A branch is just a pointer to a commit.
  fastforward merges happen if branches have not diverged.
  3-way-merges happen if branches have diverged.

  git log --oneline --all --graph
  git switch -C <new_branch_name> # will create a new branch and switch to it.
  git merge --no-ff <branch_name>

  git config ff no # Disables fastforward merges in current repo.
  git config --global ff no # Disables fastforward merges in all repo.

  # viewing merged and un-merged branches
  git branch --merged # shows all branches merged in master.
  git branch -d <branch_name> # will delete the branch.
  git branch --no-merged # Shows branches not merged in master.

  # Merge Conflicts
  git swicth -C feture1/newfeature # Create and switch to a new branch.
  git switch master
  git merge feature1/newfeature

  # Graphical merge tools for git
  1. Kdiff
  2. P4merge
  3. Winmerge (Windows only)

  git config --global merge.tool p4merge
  git config --global mergetool.p4merge.path "<path_to_p4merge>"
  git mergetool # Will invoke the merge tool.

  #Aborting a Merge
  git merge --abort # Aborts a merge

  #undoing a bad merge
  git log --oneline --all --graph
  git reset --hard HEAD~1 # 1 commit before the last commit.
  git reset --hard <commit id>.

  #Reverting a commit
  git revert HEAD # will fail as need to specify how to revert
  git revert -m 1 HEAD

  #Squash Merge
  git switch master
  git merge --squash feature1/newfeature # Will do a squash merge.
  git status -s
  git commit -m "A meaningful msg"

  git branch --merged # Shows merged branches. but in case of squash merge it wont show branch a smerged.
  git branch -d <branch_name> # Will delete the branch.

  #Rebasing
  it changes the base of feature branch to latest commit in master.
  rebasing re writes history.
  git switch -C feature1/newfeature # Creates a new branch.
  git log --oneline --all --graph
  git switch master # changes to master branch.
  git switch feature1/newfeature
  git rebase master
  git log --oneline --all --graph
  git switch master
  git merge feature1/newfeature
  git rebase --abort
  git rebase --continue
  git clean -fd # cleans working dir.

  git config --global mergetool.keepBackup false # disables backup of conflict merges.

  #Cherrypicking
  git cherry-pick <commitid of other branch> # run from master
  git status -s
  git commit

  #Picking A File from other branch.
  git swicth -C feature/newb
  git switch master
  git restore --source=feature/newb -- <filename> # Restore a file from feature branch to master

  git clone <repo_url>  <your custom name> # will clone a repo to a folder anme u specify.
  git log --oneline --all --graph
  git remote # shows remote repo's
  git remote -v # verbose details abt remote repo.
  git fetch # brings commits from origin.
  git log --oneline --all --graph
  git branch -vv # shows divergence between local and remote branch.
  git merge origin/master
  git pull
  git reset --hard HEAD~1 # revert the last commit.
  git pull --rebase # to rebase with pull
  git push # push the changes to remote repo.
  git push -f # Not recommended. never use.

  git config --global credential.helper cache # git will store credentials for 15 mins.

  #Sharing Tags
  By default the push command won't transfer the tags to remote repo.
  git tag v1.0
  git log --oneline
  git push origin v1.0 # push the tag to remote repo.
  git push origin --delete v1.0 # Will delete tag in remote repo
  git tag -d v1.0 # delete tag from your local repo.

  #Sharing branches
  git switch -C feature/newfeature
  git branch -vv
  git branch -r # shows remote tracking branches.
  git push -u origin feature/newfeature
  git branch -vv
  git push -d origin feature/newfeature # will delete remote branch.
  git branch -r
  git branch
  git switch master
  git branch -d feature/newfeature

  git pull
  git log --oneline --all --graph
  git remote prune origin # To delete remote branches that no longer exist.

  git fetch # to get newly created branch at remote
  git branch
  git branch -r # To view remote branches
  git switch -C feature/new origin/feture/new # will create a new local branch and make it point to the remote branch @ origin.

  git log --oneline --all --graph

  git switch master
  git merge feature/new

  git push -d origin feature/new # Delete Remote branch
  git branch -d feature/new # Delete Local branch.
  git remote prune origin # To remove tracking branches that are not on origin.

  git remote
  git remote -v # shows info abt remote.
  git remote add upstream <upstream url>
  git remote rename upstream base # Renames upstream to base.
  git remote rm base # Removes the remote.

  #Re writing history.
  we can drop , modify , combined , split commits.

  git log --oneline --all --graph
  git revert HEAD
  git reset --hard HEAD~1 # move head pointer to previous commit.

  git reset --soft => Removes the commit only.
  git reset --mixed => unstages files.
  git reset --hard => Discard local changes.

  git show HEAD # shows the contents of last commit.
  git reset --soft HEAD~1
  git status -s
  git reset --mixed HEAD # will unstage the changes as well.
  git reset --hard HEAD # Will remove all the local changes and leave you with a clean working DIR.

  # revrting commits
  git revert is used when change have been committed to remote.
  git revert HEAD~3..HEAD # will bring repo to revrted stae to 3rd prev. commit.
  git reset --hard HEAD~3 # reset head pointer and clean out revert commits from hist.
  git log --oneline --all --graph

  git revert --no-commit HEAD~3..HEAD or HEAD~3..
  git status -s
  git revert --abort
  git revert --continue

  #recovering lost commits.
  let's say some 1 accidentally does something to revert back more than needed.
  git log --oneline --all --graph
  git reset --hard HEAD~6 // does this by mistake.
  git log --oneline --all --graph
  git reflog # will show deleted history as well
  git reset hard <commit id from reflog> i.e. HEAD@{1}
  git log --oneline --all --graph
  git reflog show <feature/branch name> will show history of that particular pointer.

  #amending the last commit.
  git commit --ammend <ur msg> # to ammend the last commit.
  git log --oneline
  git show HEAD
  git reset --mixed HEAD~1 # to undo last commit and undo last staged file/changes.
  git status -s
  git clean -fd # will remove untracked files from our working dir.
  git add .
  git commit -m "your msg"
